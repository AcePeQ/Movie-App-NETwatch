// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using inzynierka_movie_app.Server.Data;

#nullable disable

namespace inzynierka_movie_app.Server.Migrations
{
    [DbContext(typeof(inzynierka_movie_appServerContext))]
    partial class inzynierka_movie_appServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("WatchlistItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("backdrop_path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_air_date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("genre_ids")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("media_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("movieID")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("poster_path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("release_date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("vote_average")
                        .HasColumnType("float");

                    b.Property<int>("vote_count")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("WatchlistItem");
                });

            modelBuilder.Entity("WatchlistItem", b =>
                {
                    b.HasOne("User", null)
                        .WithMany("Watchlist")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Watchlist");
                });
#pragma warning restore 612, 618
        }
    }
}
